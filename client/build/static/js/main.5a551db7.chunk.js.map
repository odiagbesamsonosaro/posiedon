{"version":3,"sources":["components/Navigation.js","components/home.js","components/creategame.js","components/winners.js","io/index.js","io/actions.js","components/iolistener.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","href","Home","_ref","totalSignedUp","CreateGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","bind","assertThisInitialized","updateGameObject","state","game","question","options","totalwinners","date","answer","e","setState","objectSpread","defineProperty","target","id","value","preventDefault","props","_this$state$game","style","padding","paddingLeft","onSubmit","type","placeholder","required","onChange","Component","Winners","winners","length","map","winner","Socket","actions","getgameobject","setgameobject","turngameonoroff","updategameobject","newuserjoined","IoListener","_this$props","socket","setGameObject","updateTotalNumberOfSignedUpUser","on","data","Game","setGameState","option","toString","paddingTop","gameison","checked","App","updateTotalNumberOfSignedUpUsers","emit","components_Navigation","home","totalSignedup","components_winners","components_game","creategame","iolistener","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a551db7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navigation = () => {\n  return (\n    <div className=\"tp-navigation\">\n      <h1>\n        <a href=\"#\" className=\"tp-brand\">\n          Poseidon\n        </a>\n      </h1>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nconst Home = ({ totalSignedUp }) => {\n  return (\n    <div className=\"tp-main\">\n      <h2>Total for</h2>\n      <div className=\"tp-real-time-data\">\n        <div className=\"tp-total\">\n          <h2>Game</h2>\n          <h3>{totalSignedUp ? totalSignedUp : 0}</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass CreateGame extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.updateGameObject = this.updateGameObject.bind(this);\n    this.state = {\n      game: {\n        question: \"\",\n        options: \"\",\n        totalwinners: 0,\n        date: \"\",\n        answer: \"\"\n      }\n    };\n  }\n  handleInputChange(e) {\n    const game = this.state.game;\n\n    this.setState({\n      game: { ...game, [e.target.id]: e.target.value }\n    });\n  }\n\n  updateGameObject(e) {\n    e.preventDefault();\n    const game = this.state.game;\n    const { updateGameObject } = this.props;\n    updateGameObject(game);\n  }\n\n  render() {\n    const { updateGameObject } = this.props;\n    const { question, options, totalwinners, date, answer } = this.state.game;\n    return (\n      <div className=\"tp-create-game\">\n        <h3 style={{ padding: 10, paddingLeft: 0 }}>Create a new game</h3>\n        <form onSubmit={this.updateGameObject}>\n          <div>\n            <input\n              type=\"text\"\n              className=\"tp-input-field\"\n              placeholder=\"question\"\n              id=\"question\"\n              required\n              value={question}\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div>\n            <input\n              type=\"text\"\n              className=\"tp-input-field\"\n              placeholder=\"options\"\n              value={options}\n              required\n              id=\"options\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div>\n            <input\n              type=\"number\"\n              placeholder=\"total winners\"\n              value={totalwinners}\n              className=\"tp-input-field\"\n              id=\"totalwinners\"\n              required\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Answer\"\n              value={answer}\n              className=\"tp-input-field\"\n              id=\"answer\"\n              required\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div>\n            <input\n              type=\"date\"\n              id=\"date\"\n              className=\"tp-input-field\"\n              placeholder=\"Choose date\"\n              onChange={this.handleInputChange}\n              value={date}\n            />\n          </div>\n\n          <div>\n            <button className=\"tp-auth-btn\">Create game</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateGame;\n","import React from \"react\";\n\nconst Winners = () => {\n  const winner = [];\n  const winners = winner.length ? (\n    winners.map(winner => {\n      return null;\n    })\n  ) : (\n    <p className=\"tp-no-winner\">No winners to be paid</p>\n  );\n  return (\n    <div className=\"tp-winners\">\n      <h2>Winners</h2>\n      {winners}\n    </div>\n  );\n};\n\nexport default Winners;\n","import * as IO from \"socket.io-client\";\n\nconst endPoint = \"https://topner.herokuapp.com\";\nconst Socket = new IO(endPoint);\nexport default Socket;\n","const actions = {\n  getgameobject: \"GET-GAME\",\n  setgameobject: \"SET-GAME\",\n  turngameonoroff: \"TURN-ON-OFF\",\n  updategameobject: \"UPDATE-GAME-OBJECT\",\n  newuserjoined: \"NEW-USER\"\n};\n\nexport default actions;\n","import React, { Component } from \"react\";\nimport actions from \"../io/actions\";\n\nconst { setgameobject, newuserjoined } = actions;\nclass IoListener extends Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n    const {\n      socket: Socket,\n      setGameObject,\n      updateTotalNumberOfSignedUpUser\n    } = this.props;\n\n    Socket.on(setgameobject, game => {\n      setGameObject(game);\n    });\n\n    Socket.on(newuserjoined, data => {\n      updateTotalNumberOfSignedUpUser(data);\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default IoListener;\n","import React from \"react\";\nconst Game = ({ game, setGameState }) => {\n  const res = game ? (\n    <div className=\"tp-game\">\n      <h2>{game.question.question}</h2>\n      <h4>{game.question.option.toString()}</h4>\n      <h4>{game.question.answer}</h4>\n      <h2 style={{ paddingTop: 20 }}>\n        {game.gameison ? (\n          <span className=\"tp-indicator tp-game-on\" />\n        ) : (\n          <span className=\"tp-indicator tp-game-off\" />\n        )}\n      </h2>\n      <label className=\"tp-container\">\n        Set game on/off{\" \"}\n        <input\n          type=\"checkbox\"\n          checked={game.gameison}\n          onChange={setGameState}\n        />\n        <span className=\"tp-checkmark\" />\n      </label>\n    </div>\n  ) : (\n    <h3>No game is on</h3>\n  );\n\n  return res;\n};\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navigation from \"./components/Navigation\";\nimport Home from \"./components/home\";\nimport CreateGame from \"./components/creategame\";\nimport Winners from \"./components/winners\";\nimport Socket from \"./io/index\";\nimport Iolistener from \"./components/iolistener\";\nimport actions from \"./io/actions\";\nimport Game from \"./components/game\";\n\nconst { getgameobject, turngameonoroff, updategameobject } = actions;\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      game: null,\n      totalSignedUp: null\n    };\n\n    this.setGameObject = this.setGameObject.bind(this);\n    this.updateTotalNumberOfSignedUpUsers = this.updateTotalNumberOfSignedUpUsers.bind(\n      this\n    );\n  }\n\n  setGameObject(game) {\n    this.setState({\n      game\n    });\n  }\n\n  updateGameObject(data) {\n    Socket.emit(updategameobject, data);\n  }\n\n  setGameState(e) {\n    const { checked } = e.target;\n    if (checked) {\n      Socket.emit(turngameonoroff, true);\n    } else {\n      Socket.emit(turngameonoroff, false);\n    }\n  }\n\n  componentDidMount() {\n    // grab the game object from the server\n    Socket.emit(getgameobject);\n  }\n\n  updateTotalNumberOfSignedUpUsers(data) {\n    this.setState({\n      totalSignedUp: data\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"tp-main\">\n          <Navigation />\n          <Home totalSignedup={this.state.totalSignedUp} />\n          <Winners />\n          <Game game={this.state.game} setGameState={this.setGameState} />\n          <CreateGame updateGameObject={this.updateGameObject} />\n\n          <Iolistener\n            socket={Socket}\n            setGameObject={this.setGameObject}\n            updateTotalNumberOfSignedUpUsers={\n              this.updateTotalNumberOfSignedUpUsers\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}