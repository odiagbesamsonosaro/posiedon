{"version":3,"sources":["components/Navigation.js","io/index.js","io/actions.js","components/iolistener.js","components/withdrawals.js","components/creategame.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","react_default","a","createElement","className","react_router_dom","to","exact","activeClassName","Socket","actions","getgameobject","setgameobject","turngameonoroff","updategameobject","newuserjoined","resetuser","getwithdrawalrequest","requests","clearwithdrawal","IoListener","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","updateWithdrawalData","socket","setGameObject","setWithdrawalRequest","on","game","data","toast","delay","Component","Withdrawals","_this","clearWithdrawalRequest","bind","assertThisInitialized","e","id","target","emit","_this2","withdrawals","withdraws","map","val","user","username","bank","account_number","amount","style","fontSize","color","onClick","_id","CreateGame","handleInputChange","updateGameObject","state","question","options","date","answer","setState","objectSpread","defineProperty","value","preventDefault","reset","_this$state$game","possibleWinners","padding","paddingLeft","onSubmit","placeholder","required","onChange","type","Game","drawGame","Fragment","concat","gameison","option","setGameState","checked","creategame","App","totalSignedUp","console","log","prompt","filter","components_Navigation","react_toastify","react_router","path","render","routeProps","components_withdrawals","assign","routeprops","components_game","iolistener","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.443713ae.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n\nconst Navigation = props => {\n  return (\n    <div className=\"tp-navigation\">\n      <Link to=\"/\" exact className=\"tp-brand\">\n        Poseidon\n      </Link>\n      <ul>\n        <li>\n          <NavLink to=\"/withdrawal_request\" activeClassName=\"tp-nav-active\">\n            withdrawals\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/game\" activeClassName=\"tp-nav-active\">\n            game\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import * as IO from \"socket.io-client\";\n\nconst endPoint = \"https://topner.herokuapp.com\";\nconst Socket = new IO(endPoint);\nexport default Socket;\n","const actions = {\n  getgameobject: \"GET-GAME\",\n  setgameobject: \"SET-GAME\",\n  turngameonoroff: \"TURN-ON-OFF\",\n  updategameobject: \"UPDATE-GAME-OBJECT\",\n  newuserjoined: \"NEW-USER\",\n  resetuser: \"RESETUSER\",\n  getwithdrawalrequest: \"GET-WITHDRAWAL-REQUESTS\",\n  requests: \"RECIEVED-REQUEST\",\n  clearwithdrawal: \"CLEAR-WITHDRAWAL\"\n};\n\nexport default actions;\n","import React, { Component } from \"react\";\nimport actions from \"../io/actions\";\nimport { toast } from \"react-toastify\";\n\nconst { setgameobject, newuserjoined, requests } = actions;\nclass IoListener extends Component {\n  constructor() {\n    super();\n  }\n\n  componentDidMount() {\n    const {\n      updateWithdrawalData,\n      socket: Socket,\n      setGameObject,\n      setWithdrawalRequest\n    } = this.props;\n\n    Socket.on(setgameobject, game => {\n      setGameObject(game);\n    });\n\n    Socket.on(newuserjoined, data => {});\n\n    Socket.on(requests, data => {\n      setWithdrawalRequest(data);\n    });\n\n    Socket.on(\"CLEARED\", data => {\n      updateWithdrawalData(data);\n      toast(\"Withdrawal has been cleared\", {\n        delay: 50\n      });\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default IoListener;\n","import React, { Component } from \"react\";\nimport actions from \"../io/actions\";\n\nconst { clearwithdrawal } = actions;\n\nclass Withdrawals extends Component {\n  constructor() {\n    super();\n\n    this.clearWithdrawalRequest = this.clearWithdrawalRequest.bind(this);\n  }\n\n  componentDidMount() {\n    // grab withdrawal request\n  }\n\n  clearWithdrawalRequest(e) {\n    const id = e.target.id;\n    this.props.socket.emit(clearwithdrawal, id);\n  }\n  render() {\n    const { withdrawals } = this.props;\n    const withdraws = withdrawals\n      ? withdrawals.map(val => {\n          return (\n            <div className=\"tp-withdraw-request\">\n              <div>\n                <h2>{val.user.username}</h2>\n                <h5>{val.user.bank}</h5>\n                <h5>{val.user.account_number}</h5>\n                <h5>&#8358; {val.amount}</h5>\n              </div>\n\n              <div>\n                <button\n                  className=\"tp-dismiss\"\n                  style={{ fontSize: 40, color: \"red\" }}\n                  onClick={this.clearWithdrawalRequest}\n                  id={val._id}\n                >\n                  &times;\n                </button>\n              </div>\n            </div>\n          );\n        })\n      : \"no withdrawals for now\";\n    return (\n      <div className=\"tp-withdrawals\">\n        <h4 className=\"tp-heading\">Withdrawals</h4>\n        {withdraws}\n      </div>\n    );\n  }\n}\n\nexport default Withdrawals;\n","import React, { Component } from \"react\";\n\nclass CreateGame extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.updateGameObject = this.updateGameObject.bind(this);\n    this.state = {\n      game: {\n        question: \"\",\n        options: \"\",\n        date: \"\",\n        answer: \"\"\n      }\n    };\n  }\n  handleInputChange(e) {\n    const game = this.state.game;\n\n    this.setState({\n      game: { ...game, [e.target.id]: e.target.value }\n    });\n  }\n\n  updateGameObject(e) {\n    e.preventDefault();\n    const game = this.state.game;\n    const { updateGameObject } = this.props;\n    updateGameObject(game);\n    e.target.reset();\n  }\n\n  render() {\n    const {\n      question,\n      options,\n      possibleWinners,\n      date,\n      answer\n    } = this.state.game;\n    return (\n      <div className=\"tp-create-game\">\n        <h4 style={{ padding: 10, paddingLeft: 0 }}>Create a new game</h4>\n        <form onSubmit={this.updateGameObject}>\n          <div>\n            <textarea\n              className=\"tp-input-field\"\n              placeholder=\"question\"\n              id=\"question\"\n              required\n              value={question}\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div>\n            <input\n              type=\"text\"\n              className=\"tp-input-field\"\n              placeholder=\"options\"\n              value={options}\n              required\n              id=\"options\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Answer\"\n              value={answer}\n              className=\"tp-input-field\"\n              id=\"answer\"\n              required\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div>\n            <input\n              type=\"date\"\n              id=\"date\"\n              className=\"tp-input-field\"\n              placeholder=\"Choose date\"\n              onChange={this.handleInputChange}\n              value={date}\n            />\n          </div>\n\n          <div>\n            <button className=\"tp-auth-btn\">Create game</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateGame;\n","import React, { Component } from \"react\";\nimport CreateGame from \"./creategame\";\n\nclass Game extends Component {\n  render() {\n    const { game } = this.props;\n    const drawGame = game ? (\n      <React.Fragment>\n        <p className={`${game.gameison ? \"tp-on\" : \"tp-off\"}`}>\n          {game.question.question}\n        </p>\n        <div className=\"tp-options\">\n          {game.question.option.map(val => {\n            return <div className=\"tp-chip\">{val}</div>;\n          })}\n          <label className=\"tp-container\">\n            set game on/off\n            <input\n              type=\"checkbox\"\n              onChange={this.props.setGameState}\n              checked={game.gameison}\n            />\n            <span className=\"tp-checkmark\" />\n          </label>\n        </div>\n      </React.Fragment>\n    ) : (\n      \"Getting game....\"\n    );\n    return (\n      <div className=\"game\">\n        <h4 className=\"tp-heading\">Game</h4>\n\n        <h4>Current game</h4>\n        <div className={`tp-on-game`}>{drawGame}</div>\n        <CreateGame updateGameObject={this.props.updateGameObject} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navigation from \"./components/Navigation\";\nimport Socket from \"./io/index\";\nimport Iolistener from \"./components/iolistener\";\nimport Withdrawals from \"./components/withdrawals\";\nimport Game from \"./components/game\";\nimport actions from \"./io/actions\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst {\n  getgameobject,\n  turngameonoroff,\n  resetuser,\n  updategameobject,\n  clearwithdrawal,\n  getwithdrawalrequest\n} = actions;\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      game: null,\n\n      totalSignedUp: null,\n      withdrawals: []\n    };\n\n    this.setGameObject = this.setGameObject.bind(this);\n    this.setWithdrawalRequest = this.setWithdrawalRequest.bind(this);\n    this.updateWithdrawalData = this.updateWithdrawalData.bind(this);\n  }\n\n  setGameObject(game) {\n    // hello how are you doing\n    console.log(game);\n    this.setState({\n      game\n    });\n  }\n\n  updateGameObject(data) {\n    Socket.emit(updategameobject, data);\n  }\n\n  setGameState(e) {\n    const { checked } = e.target;\n    const sure = prompt(\"Are you sure you want to continue\");\n    if (sure) {\n      if (checked) {\n        Socket.emit(turngameonoroff, true);\n      } else {\n        Socket.emit(turngameonoroff, false);\n        Socket.emit(resetuser);\n      }\n    } else {\n      return;\n    }\n  }\n\n  setWithdrawalRequest(data) {\n    this.setState({\n      withdrawals: data\n    });\n  }\n\n  componentDidMount() {\n    // grab the game object from the server\n    Socket.emit(getgameobject);\n    Socket.emit(getwithdrawalrequest);\n  }\n\n  updateWithdrawalData(data) {\n    const withdraws = this.state.withdrawals.filter(val => {\n      console.log(data, val);\n      return data._id !== val._id;\n    });\n    console.log(withdraws);\n    this.setState({\n      withdrawals: withdraws\n    });\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navigation setGameState={this.setGameState} />\n          <ToastContainer />\n          <div className=\"tp-main-container\">\n            <Switch>\n              <Route\n                path=\"/withdrawal_request\"\n                exact\n                render={routeProps => {\n                  return (\n                    <Withdrawals\n                      {...routeProps}\n                      withdrawals={this.state.withdrawals}\n                      socket={Socket}\n                    />\n                  );\n                }}\n              />\n              <Route\n                path=\"/game\"\n                exact\n                render={routeprops => {\n                  return (\n                    <Game\n                      {...routeprops}\n                      game={this.state.game}\n                      setGameState={this.setGameState}\n                      updateGameObject={this.updateGameObject}\n                    />\n                  );\n                }}\n              />\n            </Switch>\n          </div>\n          <Iolistener\n            socket={Socket}\n            setWithdrawalRequest={this.setWithdrawalRequest}\n            setGameObject={this.setGameObject}\n            updateWithdrawalData={this.updateWithdrawalData}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}